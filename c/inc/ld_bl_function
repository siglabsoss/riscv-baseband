OUTPUT_ARCH( "riscv" )

/******************
 *
 *  LD script
 *  We define MEMORY (imem,dmem,bootloader,passfail,vmem) and the start/stop addresses
 *  We define SECTIONS which are like regex patterns to match against gcc sections
 *  Anything that matches under a SECTION is put in the desired MEMORY
 *
 * Notes:
 *    Total scalar memory is 32768 bytes long
 *    Total VMEM memory is 262144 bytes long, 65536 words long, 64K words long
 *    Each MEMORY gets it's own %full report
 *
 * Todo:
 *    Add --defsym=symbol=expression 
 *
 *
 *  See Also: 
 *    https://stackoverflow.com/questions/6687630/how-to-remove-unused-c-c-symbols-with-gcc-and-ld
 *    https://stackoverflow.com/questions/24156278/is-it-possible-to-pass-command-line-arguments-to-gnu-ld-to-create-a-section-def/
 *    
 */

/*
Recently we added GCC garbage collection of sections (aka individual functions/global vars) 
After enabling this GCC option, it broke some code that was loading stuff into vmem in tricky ways.
As a fix I added KEEP() around some sections which tells GCC to never garbage collect things placed there.
*/


EXTRA_IMEM = DEFINED(EXTRA_IMEM) ? EXTRA_IMEM : 0;

/*
BLF_SPACE = DEFINED(BLF_SPACE) ? BLF_SPACE : 0;
*/

/*
Define sizes
Each origin, should be the sum of the previous origin and length (except vmem)
*/
START_LOC = 0x0000;
BLF_LEN = 0x400;
IMEM_LEN = 0x6400 + EXTRA_IMEM - BLF_LEN;
DMEM_LEN = 0x1800 - EXTRA_IMEM;
BOOT_LEN = 0x03f8;
PASS_FAIL_LEN = 0x0008;

V_MEM_START = 0x40000;
V_MEM_LEN = 0x40000;


MEMORY {
  imem (R)       : ORIGIN = START_LOC                                    , LENGTH = IMEM_LEN
  blfun (RW)     : ORIGIN = IMEM_LEN                                     , LENGTH = BLF_LEN
  dmem (RW)      : ORIGIN = IMEM_LEN + BLF_LEN                           , LENGTH = DMEM_LEN
  bootloader (RW): ORIGIN = IMEM_LEN + BLF_LEN + DMEM_LEN                , LENGTH = BOOT_LEN
  passfail (RW)  : ORIGIN = IMEM_LEN + BLF_LEN + DMEM_LEN + BOOT_LEN     , LENGTH = PASS_FAIL_LEN
  vmem (RW)      : ORIGIN = V_MEM_START                                  , LENGTH = V_MEM_LEN
}

SECTIONS
{
  . = 0x000;
  .crt_section :
  {
   . = ALIGN(4);
   *crt.o(.text*); /* without this main.c code goes first and breaks reset vector (legacy) */
   *(.init.text*); /* without this main.c code goes first and breaks reset vector */
   *(.text*);
  } > imem

  __imem_size = SIZEOF(.crt_section);

  .var_space :
  {
    . = ALIGN(4);
    *(.sdata .sdata.*);
    *(.data .data.*);
    *(.sbss*)
  } > dmem
  
  .will_zero :
  {
    . = ALIGN(4);
    __bss_vma_start = .;
  
    *(.bss*)
    *(COMMON)
  
    . = ALIGN(4);
    __bss_vma_end = .;
  } > dmem

  /*
  This is the end of memory that the linker knows about
  This will grow with new global variables for instance
  */
  . = ALIGN(4);
  __dedicated_mem_end = .;

  /*
  Because we have a dedicated memory section above, these will never change addresses
  with general program changes.  these will only move if memory section is edited above

  These allow us to test the processor and have a dedicated place for grabbing stuff
  */
  .hard_pointers :
  {
    . = ALIGN(4);

    __pass_fail_0 = .;
    KEEP (*(__pass_fail_0))
    . = __pass_fail_0 + 4;
    
    __pass_fail_1 = .;
    KEEP (*(__pass_fail_1))
    . = __pass_fail_1 + 4;
  } > passfail




  /*
  This is the end of the dmem MEMORY section above
  */
  __sp_start = ORIGIN(dmem) + LENGTH(dmem) - 4 ;
  __stack_size = __sp_start - __dedicated_mem_end;

  .boot_section :
  {
    . = ALIGN(4);
    KEEP(*(.bootloader.entry .bootloader.entry.*));
    KEEP(*(.bootloader .bootloader.*));
    KEEP(*(.bootloader.data .bootloader.data.*));

  } > bootloader

  .vmem_constant_section :
  {
    . = ALIGN(4);
    __vmem_start = .;
     *(.vmem_offset.data .vmem_offset.data.*);
     *(.vmem_constant.data .vmem_constant.data.*);
    __vmem_end = .;
  } > vmem


  .bootload_function_section :
  {
     . = ALIGN(4); 
     __blfun_start = .; 
    *(.bootload_fun.data .bootload_fun.data.*);
    *(.bootload_fun.init.text*);
     __blfun_end = .; 
  } > blfun

}
